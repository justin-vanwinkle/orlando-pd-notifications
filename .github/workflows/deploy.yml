name: Build and Deploy to AKS

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CLUSTER_NAME: aks-centralus  # Replace with your AKS cluster name
  CLUSTER_RESOURCE_GROUP: rg-aks-centralus  # Replace with your resource group
  NAMESPACE: orlando-pd-monitor
  
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v4
    
    - name: Build image
      run: docker build . --file Dockerfile --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
    
    - name: Log into registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
    
    - name: Push images
      run: |
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Setup kubelogin
      uses: Azure/use-kubelogin@v1
      with:
        kubelogin-version: "v0.0.24"
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}
        # Convert to use kubelogin for AAD authentication
        kubelogin convert-kubeconfig -l azurecli
    
    - name: Deploy to AKS
      run: |       
        # Replace image tag in deployment
        FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}"
        echo "Replacing <IMAGE_TAG> with: $FULL_IMAGE"
        sed -i "s|<IMAGE_TAG>|$FULL_IMAGE|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        
        # Create secret from GitHub secrets
        kubectl create secret generic orlando-pd-monitor-secrets \
          --namespace=orlando-pd-monitor \
          --from-literal=resend-api-key="${{ secrets.RESEND_API_KEY }}" \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create image pull secret for GHCR
        kubectl create secret docker-registry ghcr-secret \
          --namespace=orlando-pd-monitor \
          --docker-server=${{ env.REGISTRY }} \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GITHUB_TOKEN }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        kubectl apply -f k8s/deployment.yaml
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/orlando-pd-monitor -n ${{ env.NAMESPACE }} --timeout=300s
        
        # Get deployment status
        kubectl get pods -n ${{ env.NAMESPACE }} 